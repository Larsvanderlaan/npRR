"0",""
"0","output_list <- list()"
"0","passed <-c()"
"0","for(i in 1:20) {"
"0"," n <- 10000"
"0",""
"0",""
"0",""
"0"," "
"0",""
"0","# hard_additive"
"0","theta = function(W1) {W1}"
"0"," D <- DAG.empty()"
"0","theta <- Vectorize(theta)"
"0",""
"0","key <- ""hard_additive"""
"0","D <- D +"
"0","  node(""W1"", distr = ""runif"", min = -1, max = 1) +"
"0","  node(""g"", distr = ""rconst"", const = 0.1 + 0.8*pnorm(1 - W1 + W1^2 + exp(W1) + (1+ W1)*sin(5*W1)) ) +"
"0","  node(""A"", distr = ""rbinom"", size = 1, prob = g )+"
"0","   node(""phi"", distr = ""rconst"", const = W1 + W1^3 + (1 - W1 + W1^2 + cos(5*W1))*sin(5*W1)) +"
"0","  node(""theta"", distr = ""rconst"", const =  theta(W1))+"
"0","    node(""gRtilde0"", distr = ""rconst"",  const = (-(exp(theta) + 1)*exp(phi) + (exp(2*phi)*(exp(theta) + 1)^2 + 4*(exp(theta + phi))*(1 - exp(phi)))^(0.5))/(2*exp(theta)*(1-exp(phi)))"
"0","           ) +"
"0","   node(""gRtilde1"", distr = ""rconst"",  const =    gRtilde0*exp(theta)) +"
"0","   node(""gRtilde"", distr = ""rconst"",  const =   A*gRtilde1 + (1-A)*gRtilde0) +"
"0","   node(""gR"", distr = ""rconst"",  const =  gRtilde ) +"
"0","  node(""R"", distr = ""rbinom"", size = 1, prob = gR)+"
"0","  node(""RR"", distr = ""rconst"", const = gRtilde1/gRtilde0)"
"0",""
"0","setD <- set.DAG(D, vecfun = c(""bound"", ""round"", ""theta"", ""pnorm""))"
"0","data <- sim(setD, n = n)"
"0"," print(data)"
"0","  ##################"
"0","  ###################   WORKS"
"0","  #A <- rbinom(n, size = 1, prob = 0.2+ 0.6*plogis(sin(5*(V %*% c(1,1,1))) + 0.5*cos(5*(V %*% c(1,1,1)))^2 + sin(5*V) %*% c(1,1,1) + cos(5*V) %*% c(1,1,1)))"
"0","  #Y <- rbinom(n, size = 1, prob = 0.05 + 0.9*plogis(0.9*(-0.5 + A + 0.3*A*(sin(3.5*V) %*% c(1,-1,1) + cos(3.5*V) %*% c(1,-1,1)) + sin(3*V) %*% c(-1,1,1) + cos(3*V) %*% c(1,1,-1))))"
"0","    ##################"
"0","    ##################"
"0","  Y <- data$R"
"0","  A <- data$A"
"0","  V <- as.matrix(data[, c(""W1"")])"
"0","  X <- V"
"0","  "
"0","  Q1 <- data$gRtilde1"
"0","  Q0 <- data$gRtilde0"
"0","  Q <- data$gRtilde"
"0","  g1 <- data$g"
"0","  "
"0","  lrnr_A <- Stack$new(Lrnr_xgboost$new(max_depth = 7), Lrnr_xgboost$new(max_depth = 3), Lrnr_xgboost$new(max_depth = 6), Lrnr_xgboost$new(max_depth = 5), Lrnr_xgboost$new(max_depth = 4))"
"0","  lrnr_Y <-lrnr_A"
"0","  task <- make_task(V, X, A, Y, folds = 10)"
"0","  likelihood <- make_likelihood(task, lrnr_A ,lrnr_Y, cv = T )"
"0","  genr <- make_generator(likelihood)"
"0","  task_RR <- genr(task, ""validation"")"
"0","  "
"0","  basis1 <- fourier_basis$new(orders = c(1,0,0), max_degrees = c(1,2,3))"
"0","  basis2 <- fourier_basis$new(orders = c(2,0,0), max_degrees = c(1,2,3))"
"0","  basis3 <- fourier_basis$new(orders = c(3,0,0), max_degrees = c(1,2,3))"
"0","  basis4 <- fourier_basis$new(orders = c(4,0,0), max_degrees = c(1,2,3))"
"0",""
"0","  basis_list <- list(""k=0"" = NULL,""k=1""= basis1,"
"0","                     ""k=2"" = basis2, "
"0","                     ""k=3"" =basis3,"
"0","                     ""k=4"" =basis4)"
"0"," "
"0","  lrnr <- make_learner(Pipeline,lrnr_SL.gam1, Lrnr_chainer_link$new())"
"0","                                                  "
"0"," "
"0","  lrnrs <- list()"
"0","  for(name in names(basis_list)) {"
"0","    basis <- basis_list[[name]]"
"0","     if(is.null(basis)) {"
"0","      lrnr_sieve <- NULL"
"0","    } else {"
"0","      lrnr_sieve <- Lrnr_adaptive_sieve$new(basis_generator = basis,stratify_by = ""A"", mult_by = ""ginv"")"
"0","    }"
"0","    lrr_plugin <- LRR_plugin_task_generator$new(sieve_learner = lrnr_sieve, name = name)"
"0","     "
"0","    lrnrs <- c(lrnrs, list(Pipeline$new(lrr_plugin, lrnr$clone())))"
"0","    "
"0","  }"
"0","  "
"0","  eff_loss <- make_eff_loss(task, likelihood)"
"0","  lrnr_lrr <- make_learner(Pipeline, make_learner(Stack, lrnrs), Lrnr_cv_selector$new(eff_loss))"
"0","  lrnr_lrr <- lrnr_lrr$train(task_RR)"
"0","  preds <- lrnr_lrr$predict(task_RR)"
"0","  "
"0",""
"0","y <- 0"
"0","sigma <- 0.5"
"0","kernel <- function(x) {"
"0","  exp(-(y-x)^2/sigma^2) / sqrt(2*3.14*sigma^2)"
"0","}"
"0","kernel <- Vectorize(kernel)"
"0",""
"0","all_data <- task_RR$get_data()"
"0","Q1 <- all_data$Q1"
"0","Q0 <- all_data$Q0"
"0","g1 <- all_data$g1"
"0","clever_covariates <-  (Q1 + Q0)/(Q1*Q0) * kernel(V)"
"0",""
"0","risk0 <- mean(eff_loss(preds + 0*clever_covariates))"
"0"," "
"0","risk <- function(epsilon) {"
"0","  # RR <- exp(preds + epsilon*1)"
"0","  # score <- A/(g1) *(-1/(1+ RR))* (Y-Q1) + (1-A)/((1-g1))*(RR/(1+ RR))*(Y - Q0) - (1/(1+ RR))*(Q1) + (RR/(1+ RR))*(Q0) "
"0","  # score <- abs(mean(score * clever_covariates))"
"0","   risk <- mean(eff_loss(preds + epsilon*clever_covariates))"
"0","  risk"
"0","        }"
"0",""
"0",""
"0",""
"0","optim_fit <- optim("
"0","            par = list(epsilon = 0), fn = risk,"
"0","            lower = -0.2, upper = 0.2,"
"0","            method = ""Brent"")"
"0","print(risk0)     "
"0","print(optim_fit$value)"
"0","print(risk(optim_fit$par))"
"0","epsilon <- optim_fit$par"
"0","update <- preds + epsilon*clever_covariates"
"0","print(optim_fit$par)   "
"0","RR <- exp(update)"
"0","kern <- kernel(V)"
"0","score1 <- A/(g1) *(-1/(1+ RR))* (Y-Q1) + (1-A)/((1-g1))*(RR/(1+ RR))*(Y - Q0) - (1/(1+ RR))*(Q1) + (RR/(1+ RR))*(Q0) "
"0","print(mean(score1))"
"0","score1a <- clever_covariates*score1"
"0","print(mean(score1a))"
"0","est_X <- kern * update"
"0","psi <- mean(est_X)"
"0","EIC <- score1a + est_X - psi"
"0","print(mean(EIC))"
"0","radius <- 1.96*sd(EIC)/sqrt(n)"
"0","upper <- psi + radius"
"0","lower <- psi - radius"
"0","ests <- c(psi, lower, upper)"
"0","names(ests) <- c(""psi"", ""lower"", ""upper"")"
"0","print(ests)"
"0","output_list[[i]] <- ests"
"0","pass <- (true >= lower) && (true <= upper)"
"0","passed <- c(passed, pass)"
"0","print(table(passed))"
"0","print(mean(passed))"
"0","}"
"2","...automatically assigning order attribute to some nodes...
"
"2","node W1, order:1
"
"2","node g, order:2
"
"2","node A, order:3
"
"2","node phi, order:4
"
"2","node theta, order:5
"
"2","node gRtilde0, order:6
"
"2","node gRtilde1, order:7
"
"2","node gRtilde, order:8
"
"2","node gR, order:9
"
"2","node R, order:10
"
"2","node RR, order:11
"
"1","[1]"
"1"," ""current list of user-defined vectorized functions: bound,round,theta,pnorm"""
"1","
"
"2","simulating observed dataset from the DAG object
"
